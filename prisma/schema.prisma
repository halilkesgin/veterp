generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

enum UserRole {
    ADMIN
    USER
}

model Store {
    id   String @id @default(uuid())
    name String

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    storages   Storage[]
    products   Product[]
    orders     Order[]
    orderItems OrderItems[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model User {
    id                    String                 @id @default(uuid())
    name                  String?
    surname               String?
    phone                 String?
    email                 String?                @unique
    emailVerified         DateTime?
    image                 String?
    password              String?
    role                  UserRole               @default(USER)
    stores                Store[]
    accounts              Account[]
    isTwoFactorEnabled    Boolean                @default(false)
    twoFactorConfirmation TwoFactorConfirmation?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Account {
    id                String  @id @default(uuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([provider, providerAccountId])
}

model VerificationToken {
    id      String   @id @default(uuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model PasswordResetToken {
    id      String   @id @default(uuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model TwoFactorToken {
    id      String   @id @default(uuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model TwoFactorConfirmation {
    id String @id @default(uuid())

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId])
}

model Storage {
    id String @id @default(uuid())

    name  String
    piece String

    storeId String
    store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)

    products Product[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Product {
    id String @id @default(uuid())

    name  String
    piece String
    price Decimal

    storeId String
    store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)

    storageId String
    storage   Storage @relation(fields: [storageId], references: [id], onDelete: Cascade)

    orderItems OrderItems[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Order {
    id String @id @default(uuid())

    storeId String
    store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)

    orderItems OrderItems[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model OrderItems {
    id String @id @default(uuid())

    storeId String
    store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)

    orderId String
    order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

    productId String
    product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
